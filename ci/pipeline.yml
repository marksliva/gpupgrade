## Code generated by ci/generate.go - DO NOT EDIT
---
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14

resources:
- name: gpupgrade_src
  type: git
  source:
    uri: ((gpupgrade-git-remote))
    branch: ((gpupgrade-git-branch))

- name: gpdb6_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: 6X_STABLE


- name: bin_gpdb5_centos6
  type: s3
  source:
    access_key_id: ((bucket-access-key-id))
    bucket: ((gpdb-stable-builds-bucket-name))
    region_name: ((aws-region))
    secret_access_key: ((bucket-secret-access-key))
    versioned_file: release_candidates/bin_gpdb_centos6/gpdb5/bin_gpdb.tar.gz



- name: bin_gpdb6.1.0_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/gpdb6/server-rc-(6\.1\.0.*)-rhel6_x86_64.debug.tar.gz


- name: bats
  type: git
  source:
    uri: https://github.com/bats-core/bats-core
    branch: master
    tag_filter: v1.*

- name: slack-alert
  type: slack-notification
  source:
    url: ((cm_webhook_url))

- name: ccp_src
  type: git
  source:
    branch: ((ccp-git-branch))
    private_key: ((ccp-git-key))
    uri: ((ccp-git-remote))

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key))
    vars:
      project_id: ((google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- name: dump_gpdb6_icw_gporca_centos6
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: 6X_STABLE/icw_gporca_centos6_dump/dump.sql.xz

- name: dump_gpdb5_simple
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: 5X_STABLE/simple_dump/dump.sql.xz

anchors:
  - &ccp_default_params
    action: create
    delete_on_failure: true
    generate_random_name: true
    terraform_source: ccp_src/google/

  - &ccp_gen_cluster_default_params
    AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
    AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
    AWS_DEFAULT_REGION: ((aws-region))
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: ((tf-bucket-name))
    CLOUD_PROVIDER: google

  - &ccp_destroy
    put: terraform
    params:
      action: destroy
      env_name_file: terraform/name
      terraform_source: ccp_src/google/
      vars:
        aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
        aws_ebs_volume_type: standard
    get_params:
      action: destroy

  - &set_failed
    do:
      - task: on_failure_set_failed
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: pivotaldata/ccp
              tag: "7"
          inputs:
            - name: ccp_src
            - name: terraform
          run:
            path: 'ccp_src/google/ccp_failed_test.sh'
          params:
            GOOGLE_CREDENTIALS: ((google-service-account-key))
            GOOGLE_PROJECT_ID: ((google-project-id))
            GOOGLE_ZONE: ((google-zone))
            GOOGLE_SERVICE_ACCOUNT: ((google-service-account))
            AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
            AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
            AWS_DEFAULT_REGION: ((tf-machine-region))
            BUCKET_PATH: clusters-google/
            BUCKET_NAME: ((tf-bucket-name))

  - &slack_alert
    do:
      - put: slack-alert
        params:
          text: |
            Hey team, <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|gpupgrade/$BUILD_JOB_NAME> failed.

jobs:
- name: build
  plan:
  - get: gpupgrade_src
    trigger: true
  - task: build
    file: gpupgrade_src/ci/tasks/build.yml
  on_failure:
    <<: *slack_alert

- name: noinstall-tests
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: bats
  - task: noinstall-tests
    file: gpupgrade_src/ci/tasks/noinstall-tests.yml
  on_failure:
    <<: *slack_alert

- name: install-tests
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: gpdb_src
      resource: gpdb6_src
    - get: bats
    - get: bin_gpdb
      resource: bin_gpdb6.1.0_centos6
      trigger: true
  - task: install-tests
    file: gpupgrade_src/ci/tasks/install-tests.yml
  on_failure:
    <<: *slack_alert

- name: 6-to-6
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: bin_gpdb6
      resource: bin_gpdb6.1.0_centos6
      trigger: true
    - get: ccp_src
    # FIXME: this is not guaranteed to be the same dump generated by the above
    # binary...
    - get: sqldump
      resource: dump_gpdb6_icw_gporca_centos6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        instance_type: n1-standard-2
        number_of_nodes: 4
        standby_master: true
        PLATFORM: centos6
  - task: gen_old_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos6
    input_mapping:
      gpdb_binary: bin_gpdb6
  - task: gpinitsystem_old_cluster
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: upgrade_cluster
    file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
    params:
      GPHOME_OLD: /usr/local/greenplum-db-devel
      GPHOME_NEW: /usr/local/greenplum-db-devel
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  on_failure:
    <<: *slack_alert

- name: 6-to-6-no-standby
  plan:
  - in_parallel:
    - get: gpupgrade_src
      trigger: true
    - get: bin_gpdb6
      resource: bin_gpdb6.1.0_centos6
      trigger: true
    - get: ccp_src
    # FIXME: this is not guaranteed to be the same dump generated by the above
    # binary...
    - get: sqldump
      resource: dump_gpdb6_icw_gporca_centos6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        instance_type: n1-standard-2
        number_of_nodes: 4
        PLATFORM: centos6
  - task: gen_old_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos6
    input_mapping:
      gpdb_binary: bin_gpdb6
  - task: gpinitsystem_old_cluster
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: upgrade_cluster
    file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
    params:
      GPHOME_OLD: /usr/local/greenplum-db-devel
      GPHOME_NEW: /usr/local/greenplum-db-devel
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  on_failure:
    <<: *slack_alert


- name: 5-to-6.1.0
  plan:
    - in_parallel:
        - get: gpupgrade_src
          trigger: true
        - get: bin_gpdb_old
          resource: bin_gpdb5_centos6
          trigger: true
        - get: bin_gpdb_new
          resource: bin_gpdb6.1.0_centos6
          trigger: true
        - get: ccp_src
        - get: sqldump
          resource: dump_gpdb5_simple
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          instance_type: n1-standard-2
          number_of_nodes: 4
          standby_master: true
          PLATFORM: centos6
    - task: gen_old_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        PLATFORM: centos6
      input_mapping:
        gpdb_binary: bin_gpdb_old
    - task: gpinitsystem_old_cluster
      file: ccp_src/ci/tasks/gpinitsystem.yml
    - task: prepare_old_and_new_installations
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
            tag: latest
        inputs:
          - name: bin_gpdb_new
          - name: cluster_env_files
        params:
          GPHOME_OLD: /usr/local/greenplum-db-old
          GPHOME_NEW: /usr/local/greenplum-db-new
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --no-progress openssh-client

              cp -R cluster_env_files/.ssh /root/.ssh

              # XXX gen_cluster installs the old binaries under
              #     /usr/local/greenplum-db-devel
              # which, due to an incorrect RPATH setting in our build process,
              # causes cross-linking with the new binaries. Move the binaries
              # from that path.
              ssh -ttn mdw '
                  set -ex
                  source /usr/local/greenplum-db-devel/greenplum_path.sh
                  MASTER_DATA_DIRECTORY=/data/gpdata/master/gpseg-1 gpstop -ai
              '
              for host in $(cat cluster_env_files/hostfile_all); do
                  ssh -ttn centos@"$host" GPHOME_OLD="${GPHOME_OLD}" '
                      set -ex
                      sudo mv /usr/local/greenplum-db-devel ${GPHOME_OLD}
                      sudo sed -e "s|GPHOME=.*$|GPHOME=${GPHOME_OLD}|" -i ${GPHOME_OLD}/greenplum_path.sh
                  '
              done
              ssh -ttn mdw GPHOME_OLD="${GPHOME_OLD}" '
                  set -ex
                  source ${GPHOME_OLD}/greenplum_path.sh
                  MASTER_DATA_DIRECTORY=/data/gpdata/master/gpseg-1 gpstart -a
              '

              # Install the new binary.
              for host in $(cat cluster_env_files/hostfile_all); do
                  scp bin_gpdb_new/*.tar.gz "${host}:/tmp/bin_gpdb_new.tar.gz"

                  ssh -ttn centos@"$host" GPHOME_NEW="${GPHOME_NEW}" '
                      set -ex
                      sudo mkdir -p ${GPHOME_NEW}
                      sudo tar -xf /tmp/bin_gpdb_new.tar.gz -C ${GPHOME_NEW}
                      sudo chown -R gpadmin:gpadmin ${GPHOME_NEW}
                      sudo sed -e "s|GPHOME=.*$|GPHOME=${GPHOME_NEW}|" -i ${GPHOME_NEW}/greenplum_path.sh
                  '
              done
    - task: upgrade_cluster
      file: gpupgrade_src/ci/tasks/upgrade-cluster.yml
      params:
        GPHOME_OLD: /usr/local/greenplum-db-old
        GPHOME_NEW: /usr/local/greenplum-db-new
        FILTER_DIFF: 1
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  on_failure:
    <<: *slack_alert
